{"version":3,"sources":["components/changeButton/ChangeButton.tsx","components/playButton/PlayButton.tsx","components/header/Header.tsx","components/footer/Footer.tsx","components/urlDeploy.tsx","components/category/Category.tsx","components/TrainPlay/TrainPlay.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ChangeButton","props","state","isPlay","className","this","type","onChange","changeMode","checked","React","Component","PlayButton","startPressed","repeatBtn","onClick","startPlay","repeat","Header","updateChecked","isChecked","setState","updateViewState","bind","e","target","classList","contains","window","addEventListener","removeEventListener","to","Footer","href","urlDeploy","Category","error","category","fetch","then","res","json","result","map","item","url","src","image","alt","text","TrainPlay","categoryName","match","params","cat_url","cardArray","cards","filter","audioSrcArray","arrLength","length","cardArrayMake","i","push","audioSrc","sort","Math","random","randomRead","Audio","play","mouseLeave","currentTranslationSpan","document","querySelector","translation","currentWordSpan","word","add","remove","onClickHandlerTrain","currentSpeakerImg","setTimeout","onClickHandlerPlay","starContainer","clickedCard","star","createElement","prepend","splice","errorAmount","cardContainer","resultSuccess","resultFailure","starLose","onMouseLeave","data-url","data-word","data-translation","data-spk-img","App","path","component","exact","from","withRouter","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","history","createBrowserHistory","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.b255f562.chunk.js","sourcesContent":["import \"./ChangeButton.css\";\r\nimport React from 'react'\r\n\r\ninterface IProps {\r\n    isPlay: boolean,\r\n    changeMode: (value: boolean) => void\r\n}\r\n\r\ninterface IState {\r\n    isPlay: boolean\r\n}\r\n\r\n\r\n\r\nclass ChangeButton extends React.Component<IProps, IState> {\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.state = {\r\n            isPlay: true\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"switch-container\">\r\n                <span className = {\"train\" + (this.props.isPlay ? ' non-active' : '')}>Train</span>\r\n                    <label className=\"switch\">\r\n                    <input type=\"checkbox\" onChange = {() => this.props.changeMode(this.state.isPlay)} className=\"switch-input\" checked = {this.props.isPlay}/>\r\n                    <span className=\"slider round\"></span>\r\n                    </label>\r\n                <span className = {\"play\" + (this.props.isPlay ? '' : ' non-active')}>Play</span>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default ChangeButton;","import \"./PlayButton.css\";\r\nimport React from 'react'\r\n\r\ninterface IProps {\r\n    isPlay: boolean,\r\n    startPlay: (value: boolean) => void,\r\n    startPressed: boolean,\r\n    repeat: (value: boolean) => void,\r\n    repeatBtn: boolean\r\n}\r\n\r\ninterface IState {\r\n    isPlay: boolean,\r\n    startPressed: boolean,\r\n    repeatBtn: boolean\r\n}\r\n\r\n\r\n\r\nclass PlayButton extends React.Component<IProps, IState> {\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.state = {\r\n            isPlay: true,\r\n            startPressed: true,\r\n            repeatBtn: true\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"play-btn-container\">\r\n                <button className={\"start-btn\"+ (this.props.isPlay && !this.props.startPressed? '' : ' hidden')} onClick = {() => this.props.startPlay(this.state.startPressed)}>Start game</button>\r\n                <button className={\"repeat-btn\"+ (this.props.startPressed && this.props.isPlay ? '' : ' hidden')} onClick ={() => this.props.repeat(this.state.repeatBtn)}>Repeat</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default PlayButton;","import React from \"react\";\r\nimport \"./Header.css\";\r\nimport { NavLink } from 'react-router-dom';\r\nimport ChangeButton from \"../changeButton/ChangeButton\";\r\nimport PlayButton from \"../playButton/PlayButton\";\r\n\r\n\r\ninterface IProps {\r\n    isChecked: boolean,\r\n    changeMode: (value: boolean) => void,\r\n    isPlay: boolean,\r\n    startPlay: (value: boolean) => void,\r\n    startPressed: boolean,\r\n    repeat: (value: boolean) => void,\r\n    repeatBtn: boolean\r\n}\r\n\r\ninterface IState {\r\n    isChecked: boolean,\r\n    \r\n}\r\n\r\nclass Header extends React.Component<IProps, IState> {\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.state = {\r\n            isChecked: false,\r\n        }\r\n        this.updateViewState = this.updateViewState.bind(this);\r\n    }\r\n    updateViewState(e: MouseEvent) { //закрытие меню при клике: 1) не по меню 2) по ссылке в меню\r\n        const target = e.target as HTMLElement;\r\n        if(target.classList.contains('menu-input')){\r\n            if(this.state.isChecked === false){\r\n                this.setState({\r\n                    isChecked: true\r\n                });\r\n            } else  this.setState({\r\n                        isChecked: false\r\n                    });\r\n\r\n        } else this.setState({\r\n                     isChecked: false\r\n                });\r\n    }\r\n    updateChecked = () => { //открытие-закрытие меню при клике по крестику\r\n        if(this.state.isChecked === false){\r\n            this.setState({\r\n                isChecked: true\r\n            });\r\n        } else  this.setState({\r\n                    isChecked: false\r\n                });\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener(\"mousedown\", this.updateViewState);\r\n      }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener(\"mousedown\", this.updateViewState);\r\n      }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n            <header className=\"header-container\">\r\n                <div className = \"menuToggle\">\r\n                    <input type=\"checkbox\" className=\"menu-input\" onChange = {()=>this.updateChecked} checked={this.state.isChecked}/>\r\n                    <span></span>\r\n                    <span></span>\r\n                    <span></span>\r\n                    <ul className={\"menu\" + (this.props.isPlay ? ' play-mode' : '')}>\r\n                    <NavLink  to={`/`} className=\"menu-item\">Main Page</NavLink>\r\n                    <NavLink  to={`/cards/0`} className=\"menu-item\">Action (set A)</NavLink>\r\n                    <NavLink  to={`/cards/1`}  className=\"menu-item\">Action (set B)</NavLink>\r\n                    <NavLink  to={`/cards/2`}  className=\"menu-item\">Animal (set A)</NavLink>\r\n                    <NavLink  to={`/cards/3`}  className=\"menu-item\">Animal (set B)</NavLink>\r\n                    <NavLink  to={`/cards/4`}  className=\"menu-item\">Clothets</NavLink>\r\n                    <NavLink  to={`/cards/5`}  className=\"menu-item\">Emotion</NavLink>\r\n                    <NavLink  to={`/cards/6`}  className=\"menu-item\">Electronics</NavLink>\r\n                    <NavLink  to={`/cards/7`}  className=\"menu-item\">Garage</NavLink>\r\n                    </ul>\r\n                </div>\r\n        <ChangeButton isPlay= {this.props.isPlay} changeMode ={this.props.changeMode}/>\r\n        \r\n\r\n        </header>\r\n        <PlayButton isPlay= {this.props.isPlay} startPlay ={this.props.startPlay} startPressed = {this.props.startPressed} repeat = {this.props.repeat} repeatBtn = {this.props.repeatBtn}/>\r\n        </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header;\r\n\r\n","import { Component } from \"react\";\r\nimport \"./Footer.css\"\r\n\r\nclass Footer extends Component {\r\n    render() {\r\n        return (\r\n        <footer className=\"footer-container\">\r\n            <a href=\"https://github.com/barmenski/\" className=\"git-link\"> </a>\r\n            <span className=\"year-span\">2021</span>\r\n            <a href=\"https://rs.school/js/\" className=\"course-link\"> </a>\r\n          </footer>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Footer;","export const urlDeploy = \"https://barmenski-english-for-kids.herokuapp.com\"","/*import { Component } from \"react\";*/\r\n\r\n/* eslint-disable no-unused-expressions */\r\nimport { NavLink } from 'react-router-dom';\r\nimport * as React from 'react';\r\nimport './Category.css';\r\n//import category from '../categoryBase';\r\nimport Header from '../header/Header';\r\nimport Footer from '../footer/Footer';\r\n//import {getCategory} from '../categoryBase';\r\nimport { urlDeploy } from '../urlDeploy';\r\n\r\n\r\nexport interface ICategory {\r\n  id: number;\r\n  text: string,\r\n  image: string,\r\n  url: string,\r\n}\r\n\r\ninterface Category {\r\n  id: number;\r\n  text: string,\r\n  image: string,\r\n  url: string,\r\n}\r\n\r\ninterface IProps {\r\n  isPlay: boolean,\r\n  changeMode: (value: boolean) => void,\r\n  startPlay: (value: boolean) => void,\r\n  startPressed: boolean,\r\n  repeat: (value: boolean) => void,\r\n  repeatBtn: boolean\r\n  }\r\n\r\n  interface IState {\r\n    error: Error | null,\r\n    category: ICategory[]\r\n  }\r\n\r\nclass Category extends React.Component<IProps, IState> {\r\n  constructor(props:IProps) {\r\n    super(props);\r\n    this.state = {\r\n      error: null,\r\n      category: []\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n    fetch(`${urlDeploy}/api/category`)\r\n    .then(res => res.json())\r\n    .then(\r\n      (result) => {\r\n        this.setState({\r\n          category: result\r\n        });\r\n      },\r\n      (error) => {\r\n        this.setState({\r\n          error\r\n        });\r\n      }\r\n    )\r\n  }\r\n  \r\n    render() {\r\n        return (\r\n          <>\r\n          <Header isChecked changeMode={this.props.changeMode} isPlay={this.props.isPlay} startPlay={this.props.startPlay} startPressed={this.props.startPressed} repeat = {this.props.repeat} repeatBtn = {this.props.repeatBtn}/>\r\n            <div className=\"category-container container\">\r\n            \r\n            {this.state.category.map((item: ICategory) =>{\r\n                return (\r\n                  <NavLink  to={`/cards/${item.url}`}  className = {\"category-card\" + (this.props.isPlay ? ' play-mode' : '')} key={item.image}>\r\n                    <img src={\"./\" + item.image} alt={item.text} />{item.text}\r\n                  </NavLink>\r\n                )\r\n              })\r\n            }\r\n            \r\n          </div>\r\n          <Footer />\r\n        </>\r\n        )\r\n    }\r\n}\r\nexport default Category;","//import {cards} from '../cardsBase';\r\nimport Header from '../header/Header';\r\nimport Footer from '../footer/Footer';\r\nimport React from \"react\";\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport './TrainPlay.css';\r\nimport {IParams} from '../../App';\r\nimport { urlDeploy } from '../urlDeploy';\r\n//import {getCards} from '../cardsBase'\r\n\r\n\r\nexport interface ICard {\r\n    word: string,\r\n    translation: string,\r\n    image: string,\r\n    audioSrc: string,\r\n    url: string\r\n}\r\n\r\ninterface TrainPlay {\r\n  word: string,\r\n  translation: string,\r\n  image: string,\r\n  audioSrc: string,\r\n  url: string\r\n}\r\n\r\ninterface IProps extends RouteComponentProps<IParams> {\r\n  changeMode: (value: boolean) => void,\r\n  isPlay: boolean,\r\n  startPlay: (value: boolean) => void,\r\n  startPressed: boolean,\r\n  repeat: (value: boolean) => void,\r\n  repeatBtn: boolean\r\n}\r\n\r\ninterface IState {\r\n  isPlay: boolean;\r\n  startPressed: boolean;\r\n  repeatBtn: boolean,\r\n  errorAmount: number,\r\n  cards: ICard[],\r\n  error: Error | null,\r\n}\r\n\r\n\r\n\r\nclass TrainPlay extends React.Component<IProps, IState> {\r\n  constructor(props: IProps) {\r\n    super(props);\r\n    this.state = {\r\n        isPlay: true,\r\n        startPressed: false,\r\n        repeatBtn: false,\r\n        errorAmount: 0,\r\n        cards: [],\r\n        error: null\r\n    }  \r\n   \r\n  }\r\n  \r\ncomponentDidMount() {\r\n\r\n  fetch(`${urlDeploy}/api/cards`)\r\n  .then(res => res.json())\r\n  .then(\r\n    (result) => {\r\n      this.setState({\r\n        cards: result\r\n      });\r\n    },\r\n    (error) => {\r\n      this.setState({\r\n        error\r\n      });\r\n    }\r\n  )\r\n\r\n  this.cardArrayMake();\r\n  this.randomRead();\r\n  this.repeat();\r\n  \r\n}\r\n\r\n  componentDidUpdate() {\r\n\r\n}\r\n      categoryName: string = this.props.match.params.cat_url; //пераметр из адресной строки (текст)\r\n      cardArray: Array<ICard> = this.state.cards.filter((item) => { return item.url === this.categoryName});\r\n      audioSrcArray: Array<string> = [];\r\n      arrLength: number = this.cardArray.length;\r\n      \r\n\r\n\r\n      /*cardArrayMake = () => {\r\n        for (let i=0; i <this.arrLength; i++) {\r\n            this.cardArray.push(this.state.cards[this.categoryNumber][i].audioSrc);\r\n        }\r\n        this.cardArray.sort(() => Math.random() - 0.5);\r\n        //console.log(\"this.cardArray complite = \", this.cardArray);\r\n      } */\r\n\r\n      cardArrayMake = () => {\r\n        for (let i=0; i <this.arrLength; i++) {\r\n          this.audioSrcArray.push(this.cardArray[i].audioSrc);\r\n      }\r\n      this.audioSrcArray.sort(() => Math.random() - 0.5);\r\n      //console.log(\"this.cardArray complite = \", this.cardArray);\r\n    }\r\n\r\n      randomRead = () => {\r\n        if(this.props.startPressed){\r\n          new Audio(\"../\" + this.audioSrcArray[0]).play(); //читаем по audioSrc из массива cardArray<audioSrc>\r\n         // console.log(\"randomRead\", this.cardArray[0]);\r\n        }\r\n      }\r\n\r\n      repeat = () => {\r\n        if(this.props.repeatBtn){\r\n          new Audio(\"../\" + this.audioSrcArray[0]).play(); //читаем по audioSrc из массива cardArray<audioSrc>\r\n         // console.log(\"repeat\", this.cardArray[0]);\r\n        }\r\n      }\r\n\r\n      mouseLeave = (item: ICard) =>{ //убираем перевод псле того как мышка покидает карточку\r\n        const currentTranslationSpan = document.querySelector(`[data-translation=\"${item.translation}\"]`);\r\n        const currentWordSpan = document.querySelector(`[data-word=\"${item.word}\"]`);\r\n        if(currentTranslationSpan && currentWordSpan) {\r\n          if(!currentTranslationSpan.classList.contains('hidden')) {\r\n            currentTranslationSpan.classList.add('hidden');\r\n            currentWordSpan.classList.remove('hidden');\r\n          } else return;\r\n        }\r\n      }\r\n\r\n      onClickHandlerTrain = (item: ICard) => { //режим тренировки: при клике по карточке проигрываем mp3, отображаем громкоговоритель на 1с, показываем перевод\r\n          new Audio(\"../\" + item.audioSrc).play();\r\n          const currentSpeakerImg = document.querySelector(`[data-spk-img=\"${item.word}\"]`);\r\n          if(currentSpeakerImg) {currentSpeakerImg.classList.remove(\"hidden\");\r\n          setTimeout(()=>{currentSpeakerImg.classList.add(\"hidden\")}, 1000);\r\n\r\n          const currentTranslationSpan = document.querySelector(`[data-translation=\"${item.translation}\"]`);\r\n          if(currentTranslationSpan) {currentTranslationSpan.classList.remove('hidden')};\r\n\r\n          const currentWordSpan = document.querySelector(`[data-word=\"${item.word}\"]`);\r\n          if(currentWordSpan) {\r\n            if(!currentWordSpan.classList.contains('hidden')) {\r\n                currentWordSpan.classList.add('hidden');\r\n            } else return;\r\n        }\r\n      };\r\n    }\r\n    \r\n\r\n    onClickHandlerPlay = (item: ICard) => { //item - объект из cardBase.ts\r\n      const starContainer = document.querySelector(\".play-btn-container\");\r\n      const clickedCard = document.querySelector(`[data-url=\"../${item.audioSrc}\"]`);\r\n        if(this.audioSrcArray[0] === item.audioSrc) {\r\n          if(!clickedCard?.classList.contains(\"non-active\")){\r\n            new Audio(\"../audio/correct.mp3\").play();\r\n            if(clickedCard) clickedCard.classList.add(\"non-active\");\r\n            let star = document.createElement('div');\r\n            star.className = \"star-win\";\r\n            if(starContainer) starContainer.prepend(star);\r\n            this.audioSrcArray.splice(0,1);\r\n            if(this.audioSrcArray.length === 0){\r\n              if(this.state.errorAmount === 0){\r\n                new Audio(\"../audio/success.mp3\").play();\r\n                const cardContainer = document.querySelector('.cards-container');\r\n                if(cardContainer) cardContainer.classList.add('hidden');\r\n                const resultSuccess = document.querySelector('.success__img');\r\n                if(resultSuccess) resultSuccess.classList.remove('hidden');\r\n              } else {\r\n                new Audio(\"../audio/failure.mp3\").play();\r\n                const cardContainer = document.querySelector('.cards-container');\r\n                if(cardContainer) cardContainer.classList.add('hidden');\r\n                const resultFailure = document.querySelector('.failure__img');\r\n                if(resultFailure) resultFailure.classList.remove('hidden');\r\n              }\r\n            }\r\n            //console.log(this.cardArray, clickedCard);\r\n            setTimeout(this.randomRead, 500);\r\n          }\r\n        } else if (!clickedCard?.classList.contains(\"non-active\")){\r\n            let starLose = document.createElement('div');\r\n            starLose.className = \"star-lose\";\r\n            if(starContainer) starContainer.prepend(starLose);\r\n            new Audio(\"../audio/error.mp3\").play();\r\n            this.setState({errorAmount: this.state.errorAmount+1});\r\n            //console.log(\"Loh!\");\r\n          }\r\n        \r\n    }\r\n      render() {\r\n        return (\r\n        <>\r\n        <Header isChecked changeMode={this.props.changeMode} isPlay={this.props.isPlay} startPlay={this.props.startPlay} startPressed={this.props.startPressed} repeat = {this.props.repeat} repeatBtn = {this.props.repeatBtn}/>\r\n          <div className=\"cards-container container\">\r\n            {this.state.cards.map((item: ICard) =>{\r\n              return (\r\n                <div className=\"card\" key={item.word} onClick = {this.props.isPlay ?() => this.onClickHandlerPlay(item):() => this.onClickHandlerTrain(item)} onMouseLeave = {()=>this.mouseLeave(item)}>\r\n                  <img src={\"../\" + item.image} className = \"card__img\" alt={item.word} data-url = { \"../\" + item.audioSrc}/>\r\n                  <span className = {\"card-word\" + (this.props.isPlay ? ' hidden' : '')} data-word={item.word}>{item.word}</span>\r\n                  <span className = \"card-translation hidden\" data-translation={item.translation}>{item.translation}</span>\r\n                  <span className = {\"card-empty\" + (this.props.isPlay ? ' play-mode' : ' hidden')}> </span>\r\n                  <img src=\"../img/speaker-icon.svg\" alt=\"speaker\" className=\"speaker-icon hidden\" data-spk-img={item.word}/>\r\n                </div>\r\n              )\r\n            })\r\n          }\r\n          \r\n        </div>\r\n        <div className=\"result-container\">\r\n          <img src=\"../img/success.jpg\" className = \"success__img hidden\" alt=\"Success\"/>\r\n          <img src=\"../img/failure.jpg\" className = \"failure__img hidden\" alt=\"Failure\"/>\r\n        </div>\r\n        <Footer />\r\n      </>\r\n      );\r\n    }\r\n  }\r\n  export default TrainPlay;\r\n  ","import React from 'react';\nimport { Switch, Route, Redirect, withRouter } from 'react-router-dom'\nimport Category from './components/category/Category';\nimport TrainPlay from './components/TrainPlay/TrainPlay';\nimport './App.css';\nimport { RouteComponentProps } from 'react-router-dom';\n\n\nexport type IParams = { cat_url: string } ;\n\nclass App extends React.Component<RouteComponentProps> {\n\nstate = {\n  isPlay: false,\n  changeMode: false,\n  startPlay: false,\n  startPressed: false,\n  repeatBtn: false,\n}\n\nchangeMode = () => {\n  this.setState({\n    startPressed: false\n  })\n  if(this.state.isPlay === false) {\n      this.setState ({\n          isPlay: true\n      })\n  } else  {\n    this.setState ({\n              isPlay: false\n           })\n          }\n}\n\nstartPlay = () => {\n  this.setState({\n    startPressed: true\n  })\n}\n\nrepeat = () => {\n  this.setState({\n    repeatBtn: true\n  })\n}\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Switch>\n\n          <Route path='/category' component={() => <Category isPlay={this.state.isPlay} changeMode={this.changeMode} startPlay = {this.startPlay} startPressed = {this.state.startPressed} repeat={this.repeat} repeatBtn = {this.state.repeatBtn}/> }/>\n          <Redirect exact from='/' to=\"/category\"/>\n          <Route path=\"/cards/:cat_url\" component={(props: RouteComponentProps<IParams>) => (<TrainPlay {...props} isPlay={this.state.isPlay} changeMode={this.changeMode} \n              startPlay={this.startPlay} startPressed = {this.state.startPressed}\n              repeat={this.repeat} repeatBtn = {this.state.repeatBtn}/>)}/>\n        </Switch>\n\n      </div>\n    );\n  }\n};\nexport default withRouter(App);\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Router } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\n\nimport reportWebVitals from './reportWebVitals';\nimport {createBrowserHistory} from 'history';\n\nconst history = createBrowserHistory();\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router history={history}>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}